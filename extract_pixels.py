import glob
import numpy as np
import pandas as pd
import os
import array
from tqdm import tqdm
from matplotlib.pyplot import imsave, imread
import concurrent.futures

#Creating images from asm files and saving first 800 bytes
def pixels(group):
    with open(group + '/pixels.csv', 'w') as f:
        for file in tqdm(glob.glob(group + '/*.asm')):
            file_name = file.split('/')[3].split('.')[0]
            f.write(file_name + ',')
            
            b = open(file, 'rb')
            ln = os.path.getsize(file)
            width = int(ln ** 0.5)
            rem = int(ln % width)
            a = array.array('B')
            a.fromfile(b, ln-rem)
            b.close()

            g = np.reshape(a, (len(a)//width, width))
            g = np.uint8(g)

            imsave(group + '/' + file_name + '.png', g)
            image = imread(group + '/' + file_name + '.png')
            image = image.ravel()[:800]
            for index, i in enumerate(image):
                if index != 799:
                    f.write(str(i) + ',')
                else:
                    f.write(str(i))
            f.write('\n')

            
def join_csv(x):
    files = glob.glob(x + '/asm/*/*pixels.csv')
    dfs = []
    for file in files:
        dfs.append(pd.read_csv(file, header=None))
    final = pd.concat(dfs)
    final.to_csv(x + '/asm_pixels.csv', index=False)
    for file in files:
        os.remove(file)


def main():
    
    groups = glob.glob('train/asm/*')
    with concurrent.futures.ProcessPoolExecutor(max_workers=16) as executor:
        executor.map(pixels, groups)
        
    join_csv('train')
    
    groups = glob.glob('test/asm/*')
    with concurrent.futures.ProcessPoolExecutor(max_workers=16) as executor:
        executor.map(pixels, groups)
        
    join_csv('test')

if __name__ == "__main__":
    main()